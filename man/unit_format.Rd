% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format-units.R
\name{unit_format}
\alias{unit_format}
\alias{degree_format}
\title{Unit and degree labels}
\usage{
unit_format(accuracy = NULL, scale = 1, prefix = "", unit = "m",
  sep = " ", suffix = paste0(sep, unit), big.mark = " ",
  decimal.mark = ".", trim = TRUE, ...)

degree_format(accuracy = NULL, scale = 1, prefix = "", unit = "",
  sep = "", suffix = paste0(sep, "Â°", unit), big.mark = " ",
  decimal.mark = ".", trim = TRUE, ...)
}
\arguments{
\item{accuracy}{Number to round to. Use (e.g.) \code{0.01} to show 2 decimal
places of precision. If \code{NULL}, the default, uses a heuristic that should
ensure breaks have the minimum number of digits needed to show the
difference between adjacent values.

Applied to rescaled data.}

\item{scale}{A scaling factor: \code{x} will be multiply by \code{scale} before
formating (useful if the underlying data is on another scale,
e.g. for computing percentages or thousands).}

\item{prefix}{Symbols to display before and after value.}

\item{unit}{The units to append.}

\item{sep}{The separator between the number and the unit label.}

\item{suffix}{Symbols to display before and after value.}

\item{big.mark}{Character used between every 3 digits to separate thousands.}

\item{decimal.mark}{The character to be used to indicate the numeric
decimal point.}

\item{trim}{Logical, if \code{FALSE}, values are right-justified to a common
width (see \code{\link[base:format]{base::format()}}).}

\item{...}{Other arguments passed on to \code{\link[base:format]{base::format()}}.}
}
\description{
These are thin wrappers around \code{\link[=number_format]{number_format()}}
}
\examples{
# Label with units
demo_continuous(c(0, 1), labels = unit_format(unit = "m"))
# Labels in kg, but original data in g
km <- unit_format(unit = "km", scale = 1e-3, digits = 2)
demo_continuous(c(0, 2500), labels = km)
# Or with degrees
demo_continuous(c(32, 212), label = degree_format(unit = "F"))
demo_continuous(c(0, 100), label = degree_format(unit = "C"))
}
