% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format-number.r
\name{number_format}
\alias{number_format}
\alias{number}
\alias{comma_format}
\alias{comma}
\alias{percent_format}
\alias{percent}
\title{Number formatters}
\usage{
number_format(accuracy = NULL, scale = 1, prefix = "", suffix = "",
  big.mark = " ", decimal.mark = ".", trim = TRUE, ...)

number(x, accuracy = NULL, scale = 1, prefix = "", suffix = "",
  big.mark = " ", decimal.mark = ".", trim = TRUE, ...)

comma_format(accuracy = NULL, scale = 1, prefix = "", suffix = "",
  big.mark = ",", decimal.mark = ".", trim = TRUE, digits, ...)

comma(x, accuracy = NULL, scale = 1, prefix = "", suffix = "",
  big.mark = ",", decimal.mark = ".", trim = TRUE, digits, ...)

percent_format(accuracy = NULL, scale = 100, prefix = "",
  suffix = "\%", big.mark = " ", decimal.mark = ".", trim = TRUE,
  ...)

percent(x, accuracy = NULL, scale = 100, prefix = "",
  suffix = "\%", big.mark = " ", decimal.mark = ".", trim = TRUE,
  ...)
}
\arguments{
\item{accuracy}{Number to round to. Use (e.g.) \code{0.01} to show 2 decimal
places of precision. If \code{NULL}, the default, uses a heuristic that should
ensure breaks have the minimum number of digits needed to show the
difference between adjacent values.

Applied to rescaled data.}

\item{scale}{A scaling factor: \code{x} will be multiply by \code{scale} before
formating (useful if the underlying data is on another scale,
e.g. for computing percentages or thousands).}

\item{prefix, suffix}{Symbols to display before and after value.}

\item{big.mark}{Character used between every 3 digits to separate thousands.}

\item{decimal.mark}{The character to be used to indicate the numeric
decimal point.}

\item{trim}{Logical, if \code{FALSE}, values are right-justified to a common
width (see \code{\link[base:format]{base::format()}}).}

\item{...}{Other arguments passed on to \code{\link[base:format]{base::format()}}.}

\item{x}{A numeric vector to format.}

\item{digits}{Deprecated, use \code{accuracy} instead.}
}
\value{
\code{*_format()} returns a function with single parameter
\code{x}, a numeric vector, that returns a character vector.
}
\description{
A set of functions to format numeric values:
\itemize{
\item \code{number_format()} and \code{number()} are generic formatters for numbers.
\item \code{comma_format()} and \code{comma()} format numbers with commas separating
thousands.
\item \code{percent_format()} and \code{percent()} multiply values by one hundred and
display percent sign.
}

All formatters allow you to re-\code{scale} (multiplicatively), to round to
specified \code{accuracy}, to add custom \code{suffix} and \code{prefix} and to specify
\code{decimal.mark} and \code{big.mark}.
}
\examples{
demo_continuous(c(-1e6, 1e6))
# Suppress scientific notation with number_format()
demo_continuous(c(-1e6, 1e6), labels = number_format())
# Or comma_format()
demo_continuous(c(-1e6, 1e6), labels = comma_format())

# Display currencies with dollar_format()
demo_continuous(c(-1e6, 1e6), labels = dollar_format())
demo_continuous(c(-1e6, 1e6), labels = dollar_format(prefix = "\\u20ac"))
# Rescale using the scale parameter
demo_continuous(c(-1e6, 1e6), labels = dollar_format(scale = 1 / 1000))

# Show percentages with percent_format()
demo_continuous(c(0, 1))
# Or convert to percentage:
demo_continuous(c(0, 1), labels = percent_format())
# Or use prefix and suffix to create your own
french_percent <- number_format(
  accuracy = NULL,
  scale = 100,
  decimal.mark = ",",
  suffix = " \%"
)
demo_continuous(c(0, .01), labels = french_percent)
}
